@mixin Helpers($lg, $xl, $md, $sm, $colours) {
    .screen-view {
        min-height: 100vh;
        max-width: 100vw;
        min-width: 100vw;
    }

    .display-inherit {
        display: inherit;
    }

    .display-flex {
        display: flex;
    }

    .display-md-flex {
        @media (min-width: $md) {
            display: flex !important;
        }
    }
    .display-lg-flex {
        @media (min-width: $lg) {
            display: flex !important;
        }
    }
    .display-inline {
        display: inline;
    }

    .display-block {
        display: block;
    }

    .display-inline-block {
        display: inline-block;
    }

    .display-none {
        display: none;
    }

    .display-md-none {
        @media (min-width: $md) {
            display: none !important;
        }
    }

    .display-lg-none {
        @media (min-width: $lg) {
            display: none !important;
        }
    }

    .overflow-hidden {
        overflow: hidden;
    }

    .text-decoration-none {
        text-decoration: none;
    }

    .flex-column {
        flex-direction: column;
    }

    .flex-row {
        flex-direction: row;
    }

    .justify-content-center {
        justify-content: center !important;
    }

    .justify-content-right {
        justify-content: right !important;
    }

    .justify-content-start {
        justify-content: flex-start !important;
    }

    .justify-content-end {
        justify-content: flex-end !important;
    }
    .justify-content-space-around {
        justify-content: space-around !important;
    }

    .justify-content-space-between {
        justify-content: space-between !important;
    }

    .justify-content-space-evenly {
        justify-content: space-evenly !important;
    }
    .align-self-center {
        align-self: center !important;
    }
    .align-items-center {
        align-items: center !important;
    }

    .align-items-end {
        align-items: flex-end !important;
    }

    .align-items-start {
        align-items: flex-start !important;
    }

    .word-break-word {
        word-break: break-word;
    }

    .margin-auto {
        margin: auto;
    }

    .text-align-center {
        text-align: center;
    }

    .text-align-right {
        text-align: right;
    }

    .text-align-left {
        text-align: left;
    }

    .text-align-justify {
        text-align: justify;
    }

    .uppercase {
        text-transform: uppercase;
    }

    .list-style-none {
        list-style: none;
    }

    .border-bottom-none {
        border-bottom: none;
    }

    .border-1 {
        border: solid 1px map-get-deep($colours, 'light', 1);
    }

    .round {
        border-radius: 50%;
    }

    .border-box {
        box-sizing: border-box;
    }

    .box-shadow {
        box-shadow: 2px 3px 9px 0px map-get-deep($colours, 'dark', 2);

        &--light {
            box-shadow: 2px 3px 5px 3px map-get-deep($colours, 'dark', 3);
        }
    }


    .transition {
        transition: all 400ms;
    }

    .width-auto {
        width: auto !important;
    }
    .width-fit-content {
        width: fit-content !important;
    }

    .border-none {
        border: none;
    }

    .outline-none {
        outline: none;
    }

    .center {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .position-relative {
        position: relative;
    }

    .position-absolute {
        position: absolute;
    }

    .height-auto {
        height: auto;
    }

    .hr {
        &--light {
            border-top: 1px solid rgb(167, 165, 165);
        }

        &--dark {
            border-top: 1px solid rgb(110, 108, 108);
        }
    }

    .hover-opacity {
        opacity: 1;
        transition: all 190ms ease-in-out;
        cursor: pointer !important;

        &:hover {
            opacity: 0.7;
        }
    }

    .hover-scale {
        transform: translateY(0);
        transition: all 190ms ease-in-out;
        cursor: pointer !important;

        &:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px 0 map-get-deep($colours, 'primary', 3);
        }

        &:active {
            transform: translateY(1px);
        }
    }

    .hover-lift {
        box-shadow: 0 4px 8px 0 map-get-deep($colours, 'dark', 3);
        transition: all 250ms;
        cursor: pointer !important;

        &:hover {
            box-shadow: 0 9px 11px 0 map-get-deep($colours, 'dark', 3);
            transform: scale(1.02);
        }
    }

    .cursor-pointer {
        cursor: pointer;
    }

    .white-space-nowrap {
        white-space: nowrap;
    }

    .flex-wrap {
        flex-wrap: wrap;
    }

    .flex-nowrap {
        flex-wrap: nowrap;
    }

    .row {
        width: 100%;
        display: flex;
        flex-wrap: wrap;
    }

    .min-screen-height {
        min-height: 100vh;
    }


    .h-100 {
        height: 100%;
    }


    @for $i from 1 through 10 {
        .#{border-width- + $i} {
            border-bottom-width: $i + px !important;
        }
    }


    @for $i from 1 through 100 {
        .#{border-radius-px- + $i} {
            border-radius: $i + px !important;
        }
        .#{fs- + $i} {
            font-size: $i + px !important;
        }
        .#{fs-sm- + $i} {
            @media (min-width: $sm) {
                font-size: $i + px !important;
            }
        }
        .#{fs-md- + $i} {
            @media (min-width: $md) {
                font-size: $i + px !important;
            }
        }
    }

    @each $i in 10, 20, 25, 30, 40, 50, 60, 70, 80, 90, 100 {
        .#{w- + $i} {
            width: $i * 1% !important;
        }
        .#{max-width- + $i} {
            max-width: $i + rem !important;
        }
    }

    @each $i in 5, 10, 20, 30, 50, 100, 150, 110, 200, 300 {
        .#{z- + $i} {
            z-index: $i !important;
        }
        .#{border-radius- + $i} {
            border-radius: $i + px !important;
        }
    }

    @for $i from 0 through 100 {

        .#{m- + $i} {
            margin: $i + px !important;
        }
        .#{w-px- + $i} {
            width: $i + px !important;
        }
        .#{mt- + $i} {
            margin-top: $i + px !important;
        }
        .#{mb- + $i} {
            margin-bottom: $i + px !important;
        }
        .#{mr- + $i} {
            margin-right: $i + px !important;
        }
        .#{ml- + $i} {
            margin-left: $i + px !important;
        }
        .#{mx- + $i} {
            margin-left: $i + px !important;
            margin-right: $i + px !important;
        }
        .#{my- + $i} {
            margin-top: $i + px !important;
            margin-bottom: $i + px !important;
        }
        .#{p- + $i} {
            padding: $i + px !important;
        }
        .#{pt- + $i} {
            padding-top: $i + px !important;
        }
        .#{pb- + $i} {
            padding-bottom: $i + px !important;
        }
        .#{pr- + $i} {
            padding-right: $i + px !important;
        }
        .#{pl- + $i} {
            padding-left: $i + px !important;
        }
        .#{px- + $i} {
            padding-left: $i + px !important;
            padding-right: $i + px !important;
        }
        .#{py- + $i} {
            padding-top: $i + px !important;
            padding-bottom: $i + px !important;
        }
    }

    @for $i from 1 through 24 {
        .#{col- + $i} {
            flex: 0 0 $i * 4.16 * 1%;
            max-width: $i * 4.16 * 1%;
        }
        .#{col-md- + $i} {
            @media (min-width: $md) {
                flex: 0 0 $i * 4.16 * 1% !important;
                max-width: $i * 4.16 * 1% !important;
            }
        }
        .#{col-lg- + $i} {
            @media (min-width: $lg) {
                flex: 0 0 $i * 4.16 * 1% !important;
                max-width: $i * 4.16 * 1% !important;
            }
        }
    }

    @each $l1-key, $l1-value in $colours {
        .bgc-#{$l1-key} {
            @each $l2-key, $l2-value in $l1-value {
                &-#{$l2-key} {
                    background-color: $l2-value;
                }
            }
        }
        .color-#{$l1-key} {
            @each $l2-key, $l2-value in $l1-value {
                &-#{$l2-key} {
                    color: $l2-value;
                }
            }
        }
        .bc-#{$l1-key} {
            @each $l2-key, $l2-value in $l1-value {
                &-#{$l2-key} {
                    border-color: $l2-value;
                }
            }
        }
    }
}
